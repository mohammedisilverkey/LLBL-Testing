//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.5.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using practice.HelperClasses;
using practice.FactoryClasses;
using practice.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace practice.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Employee'.<br/><br/></summary>
	[Serializable]
	public partial class EmployeeEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private ManagerEntity _manager;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static EmployeeEntityStaticMetaData _staticMetaData = new EmployeeEntityStaticMetaData();
		private static EmployeeRelations _relationsFactory = new EmployeeRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Manager</summary>
			public static readonly string Manager = "Manager";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class EmployeeEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public EmployeeEntityStaticMetaData()
			{
				SetEntityCoreInfo("EmployeeEntity", InheritanceHierarchyType.None, false, (int)practice.EntityType.EmployeeEntity, typeof(EmployeeEntity), typeof(EmployeeEntityFactory), false);
				AddNavigatorMetaData<EmployeeEntity, ManagerEntity>("Manager", "Employees", (a, b) => a._manager = b, a => a._manager, (a, b) => a.Manager = b, practice.RelationClasses.StaticEmployeeRelations.ManagerEntityUsingManagerIdStatic, ()=>new EmployeeRelations().ManagerEntityUsingManagerId, null, new int[] { (int)EmployeeFieldIndex.ManagerId }, null, true, (int)practice.EntityType.ManagerEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static EmployeeEntity()
		{
		}

		/// <summary> CTor</summary>
		public EmployeeEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public EmployeeEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this EmployeeEntity</param>
		public EmployeeEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Employee which data should be fetched into this Employee object</param>
		public EmployeeEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Employee which data should be fetched into this Employee object</param>
		/// <param name="validator">The custom validator object for this EmployeeEntity</param>
		public EmployeeEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected EmployeeEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Manager' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoManager() { return CreateRelationInfoForNavigator("Manager"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this EmployeeEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static EmployeeRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Manager' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathManager { get { return _staticMetaData.GetPrefetchPathElement("Manager", CommonEntityBase.CreateEntityCollection<ManagerEntity>()); } }

		/// <summary>The Id property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."Id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)EmployeeFieldIndex.Id, true); }
			set { SetValue((int)EmployeeFieldIndex.Id, value); }		}

		/// <summary>The ManagerId property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."Manager_Id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ManagerId
		{
			get { return (Nullable<System.Int32>)GetValue((int)EmployeeFieldIndex.ManagerId, false); }
			set	{ SetValue((int)EmployeeFieldIndex.ManagerId, value); }
		}

		/// <summary>The Name property of the Entity Employee<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Employees"."Name".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 60.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)EmployeeFieldIndex.Name, true); }
			set	{ SetValue((int)EmployeeFieldIndex.Name, value); }
		}

		/// <summary>Gets / sets related entity of type 'ManagerEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ManagerEntity Manager
		{
			get { return _manager; }
			set { SetSingleRelatedEntityNavigator(value, "Manager"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace practice
{
	public enum EmployeeFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>ManagerId. </summary>
		ManagerId,
		///<summary>Name. </summary>
		Name,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace practice.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Employee. </summary>
	public partial class EmployeeRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between EmployeeEntity and ManagerEntity over the m:1 relation they have, using the relation between the fields: Employee.ManagerId - Manager.Id</summary>
		public virtual IEntityRelation ManagerEntityUsingManagerId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Manager", false, new[] { ManagerFields.Id, EmployeeFields.ManagerId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticEmployeeRelations
	{
		internal static readonly IEntityRelation ManagerEntityUsingManagerIdStatic = new EmployeeRelations().ManagerEntityUsingManagerId;

		/// <summary>CTor</summary>
		static StaticEmployeeRelations() { }
	}
}
