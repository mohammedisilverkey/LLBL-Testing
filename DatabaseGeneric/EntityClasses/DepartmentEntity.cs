//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.5.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using practice.HelperClasses;
using practice.FactoryClasses;
using practice.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace practice.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Department'.<br/><br/></summary>
	[Serializable]
	public partial class DepartmentEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<ManagerEntity> _managers;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static DepartmentEntityStaticMetaData _staticMetaData = new DepartmentEntityStaticMetaData();
		private static DepartmentRelations _relationsFactory = new DepartmentRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Managers</summary>
			public static readonly string Managers = "Managers";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class DepartmentEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public DepartmentEntityStaticMetaData()
			{
				SetEntityCoreInfo("DepartmentEntity", InheritanceHierarchyType.None, false, (int)practice.EntityType.DepartmentEntity, typeof(DepartmentEntity), typeof(DepartmentEntityFactory), false);
				AddNavigatorMetaData<DepartmentEntity, EntityCollection<ManagerEntity>>("Managers", a => a._managers, (a, b) => a._managers = b, a => a.Managers, () => new DepartmentRelations().ManagerEntityUsingDepartmentId, typeof(ManagerEntity), (int)practice.EntityType.ManagerEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static DepartmentEntity()
		{
		}

		/// <summary> CTor</summary>
		public DepartmentEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public DepartmentEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this DepartmentEntity</param>
		public DepartmentEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Department which data should be fetched into this Department object</param>
		public DepartmentEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Department which data should be fetched into this Department object</param>
		/// <param name="validator">The custom validator object for this DepartmentEntity</param>
		public DepartmentEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected DepartmentEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Manager' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoManagers() { return CreateRelationInfoForNavigator("Managers"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this DepartmentEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static DepartmentRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Manager' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathManagers { get { return _staticMetaData.GetPrefetchPathElement("Managers", CommonEntityBase.CreateEntityCollection<ManagerEntity>()); } }

		/// <summary>The DepartmentName property of the Entity Department<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Departments"."Department_Name".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 60.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String DepartmentName
		{
			get { return (System.String)GetValue((int)DepartmentFieldIndex.DepartmentName, true); }
			set	{ SetValue((int)DepartmentFieldIndex.DepartmentName, value); }
		}

		/// <summary>The Id property of the Entity Department<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Departments"."Id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)DepartmentFieldIndex.Id, true); }
			set { SetValue((int)DepartmentFieldIndex.Id, value); }		}

		/// <summary>Gets the EntityCollection with the related entities of type 'ManagerEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ManagerEntity))]
		public virtual EntityCollection<ManagerEntity> Managers { get { return GetOrCreateEntityCollection<ManagerEntity, ManagerEntityFactory>("Department", true, false, ref _managers); } }
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace practice
{
	public enum DepartmentFieldIndex
	{
		///<summary>DepartmentName. </summary>
		DepartmentName,
		///<summary>Id. </summary>
		Id,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace practice.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Department. </summary>
	public partial class DepartmentRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between DepartmentEntity and ManagerEntity over the 1:n relation they have, using the relation between the fields: Department.Id - Manager.DepartmentId</summary>
		public virtual IEntityRelation ManagerEntityUsingDepartmentId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Managers", true, new[] { DepartmentFields.Id, ManagerFields.DepartmentId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticDepartmentRelations
	{
		internal static readonly IEntityRelation ManagerEntityUsingDepartmentIdStatic = new DepartmentRelations().ManagerEntityUsingDepartmentId;

		/// <summary>CTor</summary>
		static StaticDepartmentRelations() { }
	}
}
